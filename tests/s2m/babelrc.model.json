{
  "#": "JSON Model generated from a JSON Schema with json-schema-utils",
  "$": {
    "Options": {
      "": "$ANY",
      "?ast": {
        "#": "Include the AST in the returned object",
        "@": true
      },
      "?auxiliaryCommentAfter": {
        "#": "Attach a comment after all non-user injected code.",
        "@": ""
      },
      "?auxiliaryCommentBefore": {
        "#": "Attach a comment before all non-user injected code.",
        "@": ""
      },
      "?code": {
        "#": "Enable code generation",
        "@": true
      },
      "?comments": {
        "#": "Output comments in generated output.",
        "@": true
      },
      "?compact": {
        "#": "Do not include superfluous whitespace characters and line terminators. When set to \"auto\" compact is set to true on input sizes of >500KB.",
        "|": [
          "_auto",
          "=true",
          "=false"
        ]
      },
      "?extends": {
        "#": "A path to a .babelrc file to extend",
        "@": ""
      },
      "?filename": {
        "#": "Filename for use in errors etc.",
        "@": ""
      },
      "?filenameRelative": {
        "#": "Filename relative to sourceRoot (defaults to \"filename\")",
        "@": ""
      },
      "?highlightCode": {
        "#": "ANSI highlight syntax error code frames",
        "@": true
      },
      "?ignore": {
        "#": "Opposite of the \"only\" option",
        "|": [
          "",
          [
            ""
          ]
        ]
      },
      "?inputSourceMap": {
        "#": "If true, attempt to load an input sourcemap from the file itself. If an object is provided, it will be treated as the source map object itself.",
        "|": [
          true,
          {
            "": "$ANY"
          }
        ]
      },
      "?keepModuleIdExtensions": {
        "#": "Keep extensions in module ids",
        "@": true
      },
      "?moduleId": {
        "#": "Specify a custom name for module ids.",
        "@": ""
      },
      "?moduleIds": {
        "#": "If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for common modules)",
        "@": ""
      },
      "?moduleRoot": {
        "#": "Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions. (defaults to \"sourceRoot\")",
        "@": ""
      },
      "?only": {
        "#": "A glob, regex, or mixed array of both, matching paths to only compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile a non-matching file it's returned verbatim.",
        "|": [
          "",
          [
            ""
          ]
        ]
      },
      "?plugins": {
        "#": "List of plugins to load and use",
        "@": [
          {
            "|": [
              "",
              {
                ">=": 0,
                "@": [
                  {
                    "#": "The name of the plugin.",
                    "@": ""
                  },
                  {
                    "": "$ANY",
                    "#": "The options of the plugin."
                  },
                  "$ANY"
                ]
              }
            ]
          }
        ]
      },
      "?presets": {
        "#": "List of presets (a set of plugins) to load and use",
        "@": [
          {
            "|": [
              "",
              {
                ">=": 0,
                "@": [
                  {
                    "#": "The name of the preset.",
                    "@": ""
                  },
                  {
                    "": "$ANY",
                    "#": "The options of the preset."
                  },
                  "$ANY"
                ]
              }
            ]
          }
        ]
      },
      "?retainLines": {
        "#": "Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. NOTE: This will obviously not retain the columns.",
        "@": true
      },
      "?sourceFileName": {
        "#": "Set sources[0] on returned source map. (defaults to \"filenameRelative\")",
        "@": ""
      },
      "?sourceMapTarget": {
        "#": "Set file on returned source map. (defaults to \"filenameRelative\")",
        "@": ""
      },
      "?sourceMaps": {
        "#": "If truthy, adds a map property to returned output. If set to \"inline\", a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to \"both\" then a map property is returned as well as a source map comment appended.",
        "|": [
          "_both",
          "_inline",
          "=true",
          "=false"
        ]
      },
      "?sourceRoot": {
        "#": "The root from which all sources are relative. (defaults to \"moduleRoot\")",
        "@": ""
      }
    }
  },
  "&": [
    "$Options",
    {
      "": "$ANY",
      "?env": {
        "": "$Options",
        "#": "This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { /* specific options */ } } }` which will use those options when the environment variable BABEL_ENV is set to \"production\". If BABEL_ENV isn't set then NODE_ENV will be used, if it's not set then it defaults to \"development\""
      }
    }
  ]
}
