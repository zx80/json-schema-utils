{
  "#": "JSON Model generated from a JSON Schema with json-schema-utils",
  "$": {
    "file_type": {
      "|": [
        "_adobe-illustrator",
        "_alpm",
        "_apinotes",
        "_asar",
        "_asciidoc",
        "_ash",
        "_asm",
        "_aspectj",
        "_audio",
        "_avif",
        "_awk",
        "_babelrc",
        "_bash",
        "_batch",
        "_bats",
        "_bazel",
        "_bazelrc",
        "_bib",
        "_binary",
        "_bitmap",
        "_bowerrc",
        "_browserslistrc",
        "_bzip2",
        "_c",
        "_c#",
        "_c++",
        "_c2hs",
        "_cbsd",
        "_clojure",
        "_clojurescript",
        "_cmake",
        "_codespellrc",
        "_coffee",
        "_coveragerc",
        "_crystal",
        "_csh",
        "_cson",
        "_csproj",
        "_css",
        "_csslintrc",
        "_csv",
        "_cuda",
        "_cython",
        "_dart",
        "_dash",
        "_def",
        "_diff",
        "_directory",
        "_dockerfile",
        "_dockerignore",
        "_dotenv",
        "_dtd",
        "_editorconfig",
        "_edn",
        "_ejs",
        "_eot",
        "_eps",
        "_erb",
        "_executable",
        "_expect",
        "_file",
        "_fish",
        "_flake8",
        "_gdscript",
        "_geojson",
        "_gherkin",
        "_gif",
        "_gitattributes",
        "_gitconfig",
        "_gitignore",
        "_gitlint",
        "_gitmodules",
        "_go",
        "_go-mod",
        "_go-sum",
        "_gotmpl",
        "_gpx",
        "_graphql",
        "_groovy",
        "_gyb",
        "_gyp",
        "_gzip",
        "_handlebars",
        "_haskell",
        "_hcl",
        "_header",
        "_hgrc",
        "_html",
        "_icalendar",
        "_icns",
        "_icon",
        "_idl",
        "_idris",
        "_image",
        "_inc",
        "_ini",
        "_inl",
        "_ino",
        "_inx",
        "_jade",
        "_jar",
        "_java",
        "_java-properties",
        "_javascript",
        "_jenkins",
        "_jinja",
        "_jpeg",
        "_jshintrc",
        "_json",
        "_json5",
        "_jsonnet",
        "_jsx",
        "_jupyter",
        "_kml",
        "_kotlin",
        "_ksh",
        "_lean",
        "_lektor",
        "_lektorproject",
        "_less",
        "_liquid",
        "_literate-haskell",
        "_lua",
        "_mailmap",
        "_makefile",
        "_manifest",
        "_map",
        "_markdown",
        "_mdx",
        "_mention-bot",
        "_mib",
        "_modulemap",
        "_musescore",
        "_myst",
        "_ngdoc",
        "_nim",
        "_nimble",
        "_nix",
        "_non-executable",
        "_npmignore",
        "_nunjucks",
        "_objective-c",
        "_objective-c++",
        "_ocaml",
        "_otf",
        "_p12",
        "_pdbrc",
        "_pdf",
        "_pem",
        "_perl",
        "_php",
        "_pkgbuild",
        "_plain-text",
        "_plantuml",
        "_plist",
        "_png",
        "_pofile",
        "_powershell",
        "_prettierignore",
        "_prisma",
        "_proto",
        "_puppet",
        "_purescript",
        "_pyi",
        "_pylintrc",
        "_pypirc",
        "_pyproj",
        "_python",
        "_python2",
        "_python3",
        "_pyz",
        "_qml",
        "_r",
        "_relax-ng",
        "_rst",
        "_ruby",
        "_rust",
        "_salt",
        "_sass",
        "_sbt",
        "_scala",
        "_scheme",
        "_scss",
        "_sh",
        "_shell",
        "_sln",
        "_socket",
        "_solidity",
        "_spec",
        "_sql",
        "_stylus",
        "_svelte",
        "_svg",
        "_swf",
        "_swift",
        "_swiftdeps",
        "_symlink",
        "_system-verilog",
        "_tar",
        "_tcsh",
        "_terraform",
        "_tex",
        "_text",
        "_thrift",
        "_tiff",
        "_toml",
        "_ts",
        "_tsv",
        "_tsx",
        "_ttf",
        "_twig",
        "_twisted",
        "_txsprofile",
        "_urdf",
        "_vb",
        "_vbproj",
        "_vcxproj",
        "_vdx",
        "_verilog",
        "_vhdl",
        "_vim",
        "_vtl",
        "_vue",
        "_wav",
        "_webp",
        "_wheel",
        "_wkt",
        "_woff",
        "_woff2",
        "_wsgi",
        "_xhtml",
        "_xml",
        "_xquery",
        "_xsd",
        "_xsl",
        "_yaml",
        "_yamllint",
        "_yang",
        "_yin",
        "_zcml",
        "_zig",
        "_zip",
        "_zpt",
        "_zsh"
      ]
    },
    "file_types": [
      "$file_type"
    ],
    "language": {
      "|": [
        "_conda",
        "_coursier",
        "_dart",
        "_docker",
        "_docker_image",
        "_dotnet",
        "_fail",
        "_golang",
        "_lua",
        "_node",
        "_perl",
        "_python",
        "_python_venv",
        "_r",
        "_ruby",
        "_rust",
        "_swift",
        "_pygrep",
        "_script",
        "_system"
      ]
    },
    "stage": {
      "|": [
        "_commit",
        "_merge-commit",
        "_push",
        "_prepare-commit-msg",
        "_commit-msg",
        "_post-checkout",
        "_post-commit",
        "_post-merge",
        "_post-rewrite",
        "_pre-commit",
        "_pre-merge-commit",
        "_pre-push",
        "_pre-rebase",
        "_manual"
      ]
    },
    "stages": [
      "$stage"
    ]
  },
  ">=": 1,
  "@": [
    {
      "?additional_dependencies": {
        "#": "(optional) a list of dependencies that will be installed in the environment where this hook gets run. One useful application is to install plugins for hooks such as eslint.",
        "@": [
          ""
        ]
      },
      "?alias": {
        "#": "(optional) allows the hook to be referenced using an additional id.",
        "@": ""
      },
      "?always_run": {
        "#": "(optional) if true this hook will run even if there are no matching files.",
        "@": true
      },
      "?args": {
        "#": "(optional) list of additional parameters to pass to the hook.",
        "@": [
          ""
        ]
      },
      "?description": {
        "#": "(optional) description of the hook. Used for metadata purposes only.",
        "@": ""
      },
      "?exclude": {
        "#": "(optional) exclude files that were matched by files.",
        "@": ""
      },
      "?exclude_types": {
        "#": "(optional) pattern of files to exclude.",
        "@": "$file_types"
      },
      "?fail_fast": {
        "#": "(optional) if true this hook will run even if there are no matching files.",
        "@": true
      },
      "?files": {
        "#": "(optional) the pattern of files to run on.",
        "@": ""
      },
      "?language_version": {
        "#": "(optional) see Overriding language version at https://pre-commit.com/#overriding-language-version",
        "@": ""
      },
      "?log_file": {
        "#": "(optional) if present, the hook output will additionally be written to a file.",
        "@": ""
      },
      "?minimum_pre_commit_version": {
        "#": "(optional) allows one to indicate a minimum compatible pre-commit version.",
        "@": ""
      },
      "?pass_filenames": {
        "#": "(optional) if false no filenames will be passed to the hook.",
        "@": true
      },
      "?require_serial": {
        "#": "(optional) if true this hook will execute using a single process instead of in parallel.",
        "@": true
      },
      "?stages": {
        "#": "(optional) confines the hook to the commit, merge-commit, push, prepare-commit-msg, commit-msg, post-checkout, post-commit, post-merge, post-rewrite, or manual stage. See Confining hooks to run at certain stages in https://pre-commit.com/#confining-hooks-to-run-at-certain-stages",
        "@": "$stages"
      },
      "?types": {
        "#": "(optional) list of file types to run on (AND).",
        "@": "$file_types"
      },
      "?types_or": {
        "#": "(optional) list of file types to run on (OR).",
        "@": "$file_types"
      },
      "?verbose": {
        "#": "(optional) if true, forces the output of the hook to be printed even when the hook passes.",
        "@": true
      },
      "_entry": {
        "#": "entry point - the executable to run. Can also contain arguments that will not be overridden such as `entry: autopep8 -i`.",
        "@": ""
      },
      "_id": {
        "#": "id of the hook - used in pre-commit-config.yaml.",
        "@": ""
      },
      "_language": {
        "#": "language of the hook - tells pre-commit how to install the hook.",
        "@": "$language"
      },
      "_name": {
        "#": "name of the hook - shown during hook execution.",
        "@": ""
      }
    }
  ]
}
