{
  "": "$ANY",
  "#": "A JSON representation of a Deno configuration file.",
  "?bench": {
    "": "$ANY",
    "#": "Configuration for deno bench",
    "?exclude": {
      "#": "List of files, directories or globs that will not be searched for benchmarks.",
      "@": [
        ""
      ]
    },
    "?files": {
      "": "$ANY",
      "?exclude": {
        "#": "List of files, directories or globs that will not be searched for benchmarks.",
        "@": [
          ""
        ]
      },
      "?include": {
        "#": "List of files, directories or globs that will be searched for benchmarks.",
        "@": [
          ""
        ]
      }
    },
    "?include": {
      "#": "List of files, directories or globs that will be searched for benchmarks.",
      "@": [
        ""
      ]
    }
  },
  "?compilerOptions": {
    "": "$ANY",
    "#": "Instructs the TypeScript compiler how to compile .ts files.",
    "?allowJs": {
      "#": "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.",
      "@": true
    },
    "?allowUnreachableCode": {
      "#": "Disable error reporting for unreachable code.",
      "@": true
    },
    "?allowUnusedLabels": {
      "#": "Disable error reporting for unused labels.",
      "@": true
    },
    "?checkJs": {
      "#": "Enable error reporting in type-checked JavaScript files.",
      "@": true
    },
    "?exactOptionalPropertyTypes": {
      "#": "Differentiate between undefined and not present when type checking",
      "@": true
    },
    "?experimentalDecorators": {
      "#": "Enable experimental support for TC39 stage 2 draft decorators.",
      "@": true
    },
    "?jsx": {
      "#": "Specify what JSX code is generated.",
      "|": [
        "_preserve",
        "_react",
        "_react-jsx",
        "_react-jsxdev",
        "_react-native"
      ]
    },
    "?jsxFactory": {
      "#": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'",
      "@": ""
    },
    "?jsxFragmentFactory": {
      "#": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.",
      "@": ""
    },
    "?jsxImportSource": {
      "#": "Specify module specifier used to import the JSX factory functions when using jsx: 'react-jsx*'.",
      "@": ""
    },
    "?keyofStringsOnly": {
      "#": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.",
      "@": true
    },
    "?lib": {
      "!": true,
      "#": "Specify a set of bundled library declaration files that describe the target runtime environment.",
      "@": [
        ""
      ]
    },
    "?noErrorTruncation": {
      "#": "Do not truncate error messages.",
      "@": true
    },
    "?noFallthroughCasesInSwitch": {
      "#": "Enable error reporting for fallthrough cases in switch statements.",
      "@": true
    },
    "?noImplicitAny": {
      "#": "Enable error reporting for expressions and declarations with an implied `any` type..",
      "@": true
    },
    "?noImplicitOverride": {
      "#": "Ensure overriding members in derived classes are marked with an override modifier.",
      "@": true
    },
    "?noImplicitReturns": {
      "#": "Enable error reporting for codepaths that do not explicitly return in a function.",
      "@": true
    },
    "?noImplicitThis": {
      "#": "Enable error reporting when `this` is given the type `any`.",
      "@": true
    },
    "?noImplicitUseStrict": {
      "#": "Disable adding 'use strict' directives in emitted JavaScript files.",
      "@": true
    },
    "?noStrictGenericChecks": {
      "#": "Disable strict checking of generic signatures in function types.",
      "@": true
    },
    "?noUncheckedIndexedAccess": {
      "#": "Add `undefined` to a type when accessed using an index.",
      "@": true
    },
    "?noUnusedLocals": {
      "#": "Enable error reporting when a local variables aren't read.",
      "@": true
    },
    "?noUnusedParameters": {
      "#": "Raise an error when a function parameter isn't read",
      "@": true
    },
    "?strict": {
      "#": "Enable all strict type checking options.",
      "@": true
    },
    "?strictBindCallApply": {
      "#": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.",
      "@": true
    },
    "?strictFunctionTypes": {
      "#": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.",
      "@": true
    },
    "?strictNullChecks": {
      "#": "When type checking, take into account `null` and `undefined`.",
      "@": true
    },
    "?strictPropertyInitialization": {
      "#": "Check for class properties that are declared but not set in the constructor.",
      "@": true
    },
    "?suppressExcessPropertyErrors": {
      "#": "Disable reporting of excess property errors during the creation of object literals.",
      "@": true
    },
    "?suppressImplicitAnyIndexErrors": {
      "#": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.",
      "@": true
    }
  },
  "?exclude": {
    "#": "List of files, directories or globs that will be ignored by all other configurations. Requires Deno 1.34 or later.",
    "@": [
      ""
    ]
  },
  "?fmt": {
    "": "$ANY",
    "#": "Configuration for formatter",
    "?exclude": {
      "#": "List of files, directories or globs that will not be formatted.",
      "@": [
        ""
      ]
    },
    "?files": {
      "": "$ANY",
      "?exclude": {
        "#": "List of files, directories or globs that will not be formatted.",
        "@": [
          ""
        ]
      },
      "?include": {
        "#": "List of files, directories or globs that will be formatted.",
        "@": [
          ""
        ]
      }
    },
    "?include": {
      "#": "List of files, directories or globs that will be formatted.",
      "@": [
        ""
      ]
    },
    "?indentWidth": {
      "#": "The number of characters for an indent.",
      "@": -1.0
    },
    "?lineWidth": {
      "#": "The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases.",
      "@": -1.0
    },
    "?options": {
      "": "$ANY",
      "?indentWidth": {
        "#": "The number of characters for an indent.",
        "@": -1.0
      },
      "?lineWidth": {
        "#": "The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases.",
        "@": -1.0
      },
      "?proseWrap": {
        "#": "Define how prose should be wrapped in Markdown files.",
        "|": [
          "_always",
          "_never",
          "_preserve"
        ]
      },
      "?semiColons": {
        "#": "Whether to prefer using semicolons.",
        "@": true
      },
      "?singleQuote": {
        "#": "Whether to use single quote (true) or double quote (false) for quotation.",
        "@": true
      },
      "?useTabs": {
        "#": "Whether to use tabs (true) or spaces (false) for indentation.",
        "@": true
      }
    },
    "?proseWrap": {
      "#": "Define how prose should be wrapped in Markdown files.",
      "|": [
        "_always",
        "_never",
        "_preserve"
      ]
    },
    "?semiColons": {
      "#": "Whether to prefer using semicolons.",
      "@": true
    },
    "?singleQuote": {
      "#": "Whether to use single quote (true) or double quote (false) for quotation.",
      "@": true
    },
    "?useTabs": {
      "#": "Whether to use tabs (true) or spaces (false) for indentation.",
      "@": true
    }
  },
  "?importMap": {
    "#": "The location of an import map to be used when resolving modules. If an import map is specified as an `--importmap` flag or using \"imports\" and \"scopes\" properties, they will override this value.",
    "@": ""
  },
  "?imports": {
    "": {
      "#": "The key is the specifier or partial specifier to match, with a value that represents the target specifier.",
      "@": ""
    },
    "#": "A map of specifiers to their remapped specifiers."
  },
  "?lint": {
    "": "$ANY",
    "#": "Configuration for linter",
    "?exclude": {
      "#": "List of files, directories or globs that will not be linted.",
      "@": [
        ""
      ]
    },
    "?files": {
      "": "$ANY",
      "?exclude": {
        "#": "List of files, directories or globs that will not be linted.",
        "@": [
          ""
        ]
      },
      "?include": {
        "#": "List of files, directories or globs that will be linted.",
        "@": [
          ""
        ]
      }
    },
    "?include": {
      "#": "List of files, directories or globs that will be linted.",
      "@": [
        ""
      ]
    },
    "?report": {
      "#": "The default report format to use when linting",
      "|": [
        "_pretty",
        "_json",
        "_compact"
      ]
    },
    "?rules": {
      "": "$ANY",
      "?exclude": {
        "!": true,
        "#": "List of rule names that will be excluded from configured tag sets. If the same rule is in `include` it will be run.",
        ">=": 0,
        "@": [
          ""
        ]
      },
      "?include": {
        "!": true,
        "#": "List of rule names that will be run. Even if the same rule is in `exclude` it will be run.",
        ">=": 0,
        "@": [
          ""
        ]
      },
      "?tags": {
        "!": true,
        "#": "List of tag names that will be run. Empty list disables all tags and will only use rules from `include`.",
        ">=": 0,
        "@": [
          ""
        ]
      }
    }
  },
  "?lock": {
    "#": "Whether to use a lock file or the path to use for the lock file. Can be overridden by CLI arguments.",
    "|": [
      "",
      true
    ]
  },
  "?nodeModulesDir": {
    "#": "Enables or disables the use of a local node_modules folder for npm packages. Alternatively, use the `--node-modules-dir` flag or override the config via `--node-modules-dir=false`. Requires Deno 1.34 or later.",
    "@": true
  },
  "?scopes": {
    "": {
      "": {
        "#": "The key is the specifier or partial specifier to match within the referring scope, with a value that represents the target specifier.",
        "@": ""
      },
      "#": "A definition of a scoped remapping."
    },
    "#": "Define a scope which remaps a specifier in only a specified scope"
  },
  "?tasks": {
    "#": "Configuration for deno task",
    "/^[A-Za-z][A-Za-z0-9_\\-:]*$/": {
      "#": "Command to execute for this task name.",
      "@": ""
    }
  },
  "?test": {
    "": "$ANY",
    "#": "Configuration for deno test",
    "?exclude": {
      "#": "List of files, directories or globs that will not be searched for tests.",
      "@": [
        ""
      ]
    },
    "?files": {
      "": "$ANY",
      "?exclude": {
        "#": "List of files, directories or globs that will not be searched for tests.",
        "@": [
          ""
        ]
      },
      "?include": {
        "#": "List of files, directories or globs that will be searched for tests.",
        "@": [
          ""
        ]
      }
    },
    "?include": {
      "#": "List of files, directories or globs that will be searched for tests.",
      "@": [
        ""
      ]
    }
  },
  "?vendor": {
    "#": "UNSTABLE: Enables or disables the use of a local vendor folder as a local cache for remote modules and node_modules folder for npm packages. Alternatively, use the `--vendor` flag or override the config via `--vendor=false`. Requires Deno 1.36.1 or later.",
    "@": true
  }
}
